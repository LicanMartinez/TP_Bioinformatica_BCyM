scale_fill_manual(values = c(ctr='grey95', dsx='black'))+ # colores de cada sexo
facet_grid(.~gene, # desdoblamos el gráfico verticalmente, uno para cada gen
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
topgenes.n=10 # cantidad de genes a considerar
genes.2=rownames(res)[c(2, 3, 7:9)] # nombres de estos genes
genes.2=c(genes.2, rownames(res2)[1:2])
genes.exp.2=cts.norm[genes.2,] %>% # extracción de estos genes de la tabla de conteos
t() # verticalización para poder juntar con la tabla del diseño experimental
exp.table.2=cbind(samples, genes.exp.2) # unión con la tabla de diseño
exp.table.long.2=pivot_longer(exp.table.2, cols = -c(1:5),
names_to = 'gene', values_to = 'exp') # verticalización
data.plot.2 = as.data.frame(exp.table.long.2) %>% # cambiamo a CLASS data.frame para trabajar con filter()
# filter(Treatment %in% trat) %>% # filtramos por tratamiento (sólo ctr)
filter(Tissue %in% tejidos) %>%  # filtramos por tejido (sólo CHR))
filter(Sex=='F')
ggplot(data= data.plot.2) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Treatment, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Treatment), # el relleno de los puntos también codificará el sexo
width = 0.2, # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(ctr='grey95', dsx='black'))+ # colores de cada sexo
facet_grid(.~gene, # desdoblamos el gráfico verticalmente, uno para cada gen
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
# este codigo es para una diapo, ignorar
topgenes.n=10 # cantidad de genes a considerar
genes.2=rownames(res)[c(2, 3, 7:9)] # nombres de estos genes
genes.2=c(genes.2, rownames(res2)[1:2])
genes.exp.2=cts.norm[genes.2,] %>% # extracción de estos genes de la tabla de conteos
t() # verticalización para poder juntar con la tabla del diseño experimental
exp.table.2=cbind(samples, genes.exp.2) # unión con la tabla de diseño
exp.table.long.2=pivot_longer(exp.table.2, cols = -c(1:5),
names_to = 'gene', values_to = 'exp') # verticalización
data.plot.2 = as.data.frame(exp.table.long.2) %>% # cambiamo a CLASS data.frame para trabajar con filter()
# filter(Treatment %in% trat) %>% # filtramos por tratamiento (sólo ctr)
filter(Tissue %in% tejidos) %>%  # filtramos por tejido (sólo CHR))
filter(Sex=='F')
ggplot(data= data.plot.2) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Treatment, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Treatment), # el relleno de los puntos también codificará el sexo
width = 0.2, # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(ctr='grey95', dsx='black'))+ # colores de cada sexo
facet_grid(.~gene, # desdoblamos el gráfico verticalmente, uno para cada gen
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
names(exp.table.long.2)
# este codigo es para una diapo, ignorar
topgenes.n=10 # cantidad de genes a considerar
genes.2=rownames(res)[c(2, 3, 7:9)] # nombres de estos genes
genes.2=c(genes.2, rownames(res2)[1:2])
genes.exp.2=cts.norm[genes.2,] %>% # extracción de estos genes de la tabla de conteos
t() # verticalización para poder juntar con la tabla del diseño experimental
exp.table.2=cbind(samples, genes.exp.2) # unión con la tabla de diseño
exp.table.long.2=pivot_longer(exp.table.2, cols = -c(1:5),
names_to = 'gene', values_to = 'exp')
exp.table.long.2$Treatment[exp.table.long.2$Treatment=='dsx']='trat'
data.plot.2 = as.data.frame(exp.table.long.2) %>% # cambiamo a CLASS data.frame para trabajar con filter()
# filter(Treatment %in% trat) %>% # filtramos por tratamiento (sólo ctr)
filter(Tissue %in% tejidos) %>%  # filtramos por tejido (sólo CHR))
filter(Sex=='F')
ggplot(data= data.plot.2) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Treatment, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Treatment), # el relleno de los puntos también codificará el sexo
width = 0.2, # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(ctr='grey95', trat='black'))+ # colores de cada sexo
facet_grid(.~gene, # desdoblamos el gráfico verticalmente, uno para cada gen
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
ggplot(data= data.plot.2) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Treatment, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Treatment), # el relleno de los puntos también codificará el sexo
width = 0.2, # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(ctr='grey95', trat='black'))+ # colores de cada sexo
facet_grid(.~gene, # desdoblamos el gráfico verticalmente, uno para cada gen
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.2, # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(.~gene, # desdoblamos el gráfico verticalmente, uno para cada gen
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.2, # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(.~gene, # desdoblamos el gráfico verticalmente, uno para cada gen
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
head(data.plot)
genes
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.2, # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(.~gene, # desdoblamos el gráfico verticalmente, uno para cada gen
labeller = labeller(gene = paste0(gene, 'AAAA')),
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.2, # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(.~gene, # desdoblamos el gráfico verticalmente, uno para cada gen
labeller = labeller(gene = paste0(genes, 'AAAA')),
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
paste0(genes, 'AAAA')
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.2, # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(.~gene, # desdoblamos el gráfico verticalmente, uno para cada gen
labeller = labeller(gene = paste0(genes, 'AAAA') %>%
`names<-`(genes)),
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
names(res)
res$log2FoldChange[rownames(res) %in% genes]
names(res)
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.2, # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(.~gene, # desdoblamos el gráfico verticalmente, uno para cada gen
labeller = labeller(gene = paste0(
# título de cada panel
genes, '
', res$log2FoldChange[rownames(res) %in% genes]) %>%
`names<-`(genes)),
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.2, # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(.~gene, # desdoblamos el gráfico verticalmente, uno para cada gen
labeller = labeller(gene = paste0(
# título de cada panel
genes, '
LFC = ', res$log2FoldChange[rownames(res) %in% genes]) %>%
`names<-`(genes)) %>%
round(2)
,
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.2, # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(.~gene, # desdoblamos el gráfico verticalmente, uno para cada gen
labeller = labeller(gene = paste0(
# título de cada panel
genes, '
LFC = ', res$log2FoldChange[rownames(res) %in% genes]) %>%
`names<-`(genes)) %>%
round(2)
,
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
res$log2FoldChange[rownames(res) %in% genes])
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.2, # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(.~gene, # desdoblamos el gráfico verticalmente, uno para cada gen
labeller = labeller(gene = paste0(
# título de cada panel
genes, '
LFC = ', res$log2FoldChange[rownames(res) %in% genes] %>% round(2)) %>%
`names<-`(genes))
,
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.2, # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(.~gene, # desdoblamos el gráfico verticalmente, uno para cada gen
labeller = labeller(gene = paste0(
# título de cada panel
genes, '
LFC = ', res$log2FoldChange[rownames(res) %in% genes] %>% round(2)) %>%
`names<-`(genes))
,
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
dim(res3)
dim(res2)
res2=res[order(abs(res$log2FoldChange), decreasing = T),] %>% # re-ordenamiento
as.data.frame() %>% # llevar a formato (class) data.frame
filter(padj<=0.05) %>% # filtrar por significancia (p-valor < 0.05)
head()
topgenes.n=5 # cantidad de genes a considerar
genes=rownames(res2)[1:topgenes.n] # nombres de estos genes
genes.exp=cts.norm[genes,] %>% # extracción de estos genes de la tabla de conteos
t() # verticalización para poder juntar con la tabla del diseño experimental
exp.table=cbind(samples, genes.exp) # unión con la tabla de diseño
exp.table.long=pivot_longer(exp.table, cols = -c(1:5),
names_to = 'gene', values_to = 'exp') # verticalización
data.plot= as.data.frame(exp.table.long) %>% # cambiamo a CLASS data.frame para trabajar con filter()
filter(Treatment %in% trat) %>% # filtramos por tratamiento (sólo ctr)
filter(Tissue %in% tejidos) # filtramos por tejido (sólo CHR))
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.2, # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(.~gene, # desdoblamos el gráfico verticalmente, uno para cada gen
labeller = labeller(gene = paste0(
# título de cada panel
genes, '
LFC = ', res$log2FoldChange[rownames(res) %in% genes] %>% round(2)) %>%
`names<-`(genes))
,
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.2, # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(gene~., # desdoblamos el gráfico verticalmente, uno para cada gen
labeller = labeller(gene = paste0(
# título de cada panel
genes, '
LFC = ', res$log2FoldChange[rownames(res) %in% genes] %>% round(2)) %>%
`names<-`(genes))
,
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.1, # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(gene~., # desdoblamos el gráfico verticalmente, uno para cada gen
labeller = labeller(gene = paste0(
# título de cada panel
genes, '
LFC = ', res$log2FoldChange[rownames(res) %in% genes] %>% round(2)) %>%
`names<-`(genes))
,
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.1,
height = 0, # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(gene~., # desdoblamos el gráfico verticalmente, uno para cada gen
labeller = labeller(gene = paste0(
# título de cada panel
genes, '
LFC = ', res$log2FoldChange[rownames(res) %in% genes] %>% round(2)) %>%
`names<-`(genes))
,
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.1,  # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
# height = 0,
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(gene~., # desdoblamos el gráfico verticalmente, uno para cada gen
labeller = labeller(gene = paste0(
# título de cada panel
genes, '
LFC = ', res$log2FoldChange[rownames(res) %in% genes] %>% round(2)) %>%
`names<-`(genes))
,
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.1,  # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
height = 0,
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(gene~., # desdoblamos el gráfico verticalmente, uno para cada gen
labeller = labeller(gene = paste0(
# título de cada panel
genes, '
LFC = ', res$log2FoldChange[rownames(res) %in% genes] %>% round(2)) %>%
`names<-`(genes))
,
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.01,  # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
height = 0,
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(gene~., # desdoblamos el gráfico verticalmente, uno para cada gen
labeller = labeller(gene = paste0(
# título de cada panel
genes, '
LFC = ', res$log2FoldChange[rownames(res) %in% genes] %>% round(2)) %>%
`names<-`(genes))
,
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.05,  # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
height = 0,
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(gene~., # desdoblamos el gráfico verticalmente, uno para cada gen
labeller = labeller(gene = paste0(
# título de cada panel
genes, '
LFC = ', res$log2FoldChange[rownames(res) %in% genes] %>% round(2)) %>%
`names<-`(genes))
,
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.05,  # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
height = 0,
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(gene~., # desdoblamos el gráfico verticalmente, uno para cada gen
labeller = labeller(gene = paste0(
# título de cada panel
genes, '
LFC = ', res$log2FoldChange[rownames(res) %in% genes] %>% round(2)) %>%
`names<-`(genes))
,
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
ggplot(data= data.plot) +  # datos en los que ggplot buscará lo que le ordenemos en la progrmación del gráfico
# generamos un elemento (geom) de puntos
geom_jitter(aes(x=Sex, y=exp, # la posición de cada punto codificará el nivel de expresión en función del sexo
fill=Sex), # el relleno de los puntos también codificará el sexo
width = 0.05,  # ancho de la dispersión horizontal aleatoria (para que no se solapen tanto)
height = 0,
pch=21, # estilo de punto
size=3, # tamaño de los puntos
alpha=0.5)+ # transparencia (0 - 1)
scale_fill_manual(values = c(M='slateblue2', F='hotpink1'))+ # colores de cada sexo
facet_grid(gene~., # desdoblamos el gráfico verticalmente, uno para cada gen
labeller = labeller(gene = paste0(
# título de cada panel
genes, '
LFC = ', res$log2FoldChange[rownames(res) %in% genes] %>% round(2)) %>%
`names<-`(genes))
,
scales = 'free')+ # cada panel puede tener su propia escala
labs(x=NULL, y='Expresión')+ # títulos de ejes
theme_bw() # estética general del gráfico
names(pcaData)
help(plotPCA)
head(1:10)
head(1:20)
1:20 %>% head()
1:20 %>% mean()
1:20 |. mean()
1:20 |> mean()
1:20 >| mean()
# Generación inicial del gráfico
ggplot(pcaData, # datos de entrada
# aspectos del gráfico a ser mapeados a valores de variables presentes en los datos
aes(x = PC1, # posición en X
y = PC2, # posición en Y
fill = tt)) + # color de relleno
# Recién acá le indicamos que queremos dibujar puntos sobre el gráfico.
geom_point(size =2.5, shape=23) +
# Sus coordenadas y colores van a ser definidos por el mapeo especificado en aes().
# Tamaño y forma son especificados fuera de aes() ya que, en este caso,
#     no dependen de variables de los datos
# Especificación del conjunto de colores y su leyenda
scale_fill_manual(values = colores2,
name=' ctr    dsx',
labels=c(rep('', length(tejidos)), tejidos))+
guides(fill=guide_legend(ncol=2)) +
# titulos de ejes
xlab(paste0("PC1: ", percentVar[1], "%")) +
ylab(paste0("PC2: ", percentVar[2], "%")) +
facet_grid(Sex ~ .)+ # ¿?
theme_bw() # estética
